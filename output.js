// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.querySelectorImpl = function(r, f, s) {
      return function() {
          var result = document.querySelector(s);
          return result ? f(result) : r;
      };
  };

  exports.addEventListener = function(name) {
      return function(handler) {
          return function(node) {
              return function() {
                  node.addEventListener(name, function(e) {
                      handler();
                      e.preventDefault();
                  });
              };
          };
      };
  };
})(PS["Control.Monad.Eff.DOM"] = PS["Control.Monad.Eff.DOM"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqNumber"] = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["max"] = max;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var querySelector = function (s) {
      return $foreign.querySelectorImpl(Data_Maybe.Nothing.value, Data_Maybe.Just.create, s);
  };
  exports["querySelector"] = querySelector;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS["Control.Monad.Eff.DOM"] = PS["Control.Monad.Eff.DOM"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($184) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($184));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["beginPath"] = $foreign.beginPath;
  exports["closePath"] = $foreign.closePath;
  exports["fillRect"] = $foreign.fillRect;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["stroke"] = $foreign.stroke;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["pi"] = $foreign.pi;
  exports["sin"] = $foreign.sin;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_DOM = PS["Control.Monad.Eff.DOM"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        

  // import statements --

  // Defining 3D and 2D Point objects --
  var Point3D = function (x) {
      return x;
  };
  var Point2D = function (x) {
      return x;
  };

  // Defining 3D and 2D Point objects --

  // Defining cube object --
  var Cube = function (x) {
      return x;
  };
  var Angle3D = function (x) {
      return x;
  };
  var withStroke = function (ctx) {
      return function (color) {
          return function (draw) {
              return Graphics_Canvas.withContext(ctx)(function __do() {
                  var v = Graphics_Canvas.setStrokeStyle(color)(ctx)();
                  var v1 = Graphics_Canvas.beginPath(v)();
                  var v2 = draw(v1)();
                  var v3 = Graphics_Canvas.closePath(v2)();
                  return Graphics_Canvas.stroke(v3)();
              });
          };
      };
  };

  // state object --
  var state = {
      x: 0.0, 
      y: 0.0, 
      qx: $$Math.pi / 3.0, 
      qy: $$Math.pi / 5.0, 
      qz: $$Math.pi / 7.0, 
      loop: 0.5
  };

  // Defining cube object --

  //| Function to project 3D point on 2D coordinate plane

  // This function projects the 3D points onto the 2D coordinate plane --
  var project = function (v) {
      return function (v1) {
          var yRotQz = v.y * $$Math.cos(v1.qz) - v.x * $$Math.sin(v1.qz);
          var yRotQzQx = yRotQz * $$Math.cos(v1.qx) + v.z * $$Math.sin(v1.qx);
          var zRotQzQx = v.z * $$Math.cos(v1.qx) - yRotQz * $$Math.sin(v1.qx);
          var xRotQz = v.x * $$Math.cos(v1.qz) + v.y * $$Math.sin(v1.qz);
          var xRotQzQxQy = xRotQz * $$Math.cos(v1.qy) + zRotQzQx * $$Math.sin(v1.qy);
          return {
              x: 300.0 + xRotQzQxQy, 
              y: 300.0 + yRotQzQx
          };
      };
  };

  // this function  is responsible for the animation of CUBE --
  var loopAnimation = function (window) {
      return function (ref) {
          return function (state1) {
              return function (step) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_HTML_Window.requestAnimationFrame(function __do() {
                      loopAnimation(window)(ref)(state1)(step)();
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      var v1 = step(v)();
                      return Control_Monad_Eff_Ref.writeRef(ref)(v1)();
                  })(window));
              };
          };
      };
  };
  var withAnimation = function (state1) {
      return function (step) {
          return function __do() {
              var v = DOM_HTML.window();
              var v1 = Control_Monad_Eff_Ref.newRef(state1)();
              return loopAnimation(v)(v1)(state1)(step)();
          };
      };
  };
  var withAnimateContext = function (name) {
      return function (state1) {
          return function (draw) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(name)();
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      return withAnimation(state1)(function (state2) {
                          return draw(v1)(state2);
                      })();
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Main line 145, column 3 - line 150, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };

  // This function is used to fill the canvas background with color --
  var drawBackground = function (ctx) {
      return function __do() {
          var v = Graphics_Canvas.setFillStyle("rgb(122,230,232)")(ctx)();
          return Graphics_Canvas.fillRect(v)({
              x: 60.0, 
              y: 60.0, 
              w: 500.0, 
              h: 500.0
          })();
      };
  };

  // Function to draw line between two 2D points --
  var addEdge = function (ctx) {
      return function (v) {
          return function (v1) {
              return function __do() {
                  var v2 = Graphics_Canvas.moveTo(ctx)(v.x)(v.y)();
                  return Graphics_Canvas.lineTo(v2)(v1.x)(v1.y)();
              };
          };
      };
  };

  // Function to draw the CUBE. It first draws two faces and then joins them by drawing lines between them --

  // v1,v2,v3 ---- v8 are the vertices of the cube --
  var drawCube = function (ctx) {
      return function (v) {
          return function (v1) {
              var half = v.size / 2.0;
              var v11 = project({
                  x: v.x - half, 
                  y: v.y - half, 
                  z: v.z - half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v2 = project({
                  x: v.x - half, 
                  y: v.y + half, 
                  z: v.z - half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v3 = project({
                  x: v.x - half, 
                  y: v.y - half, 
                  z: v.z + half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v4 = project({
                  x: v.x - half, 
                  y: v.y + half, 
                  z: v.z + half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v5 = project({
                  x: v.x + half, 
                  y: v.y - half, 
                  z: v.z - half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v6 = project({
                  x: v.x + half, 
                  y: v.y + half, 
                  z: v.z - half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v7 = project({
                  x: v.x + half, 
                  y: v.y - half, 
                  z: v.z + half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              var v8 = project({
                  x: v.x + half, 
                  y: v.y + half, 
                  z: v.z + half
              })({
                  qx: v1.qx, 
                  qy: v1.qy, 
                  qz: v1.qz
              });
              return withStroke(ctx)(v.color)(function (ctx2) {
                  return function __do() {
                      var v9 = addEdge(ctx2)(v11)(v5)();
                      var v10 = addEdge(v9)(v5)(v6)();
                      var v12 = addEdge(v10)(v6)(v2)();
                      var v13 = addEdge(v12)(v2)(v11)();
                      var v14 = addEdge(v13)(v3)(v7)();
                      var v15 = addEdge(v14)(v7)(v8)();
                      var v16 = addEdge(v15)(v8)(v4)();
                      var v17 = addEdge(v16)(v4)(v3)();
                      var v18 = addEdge(v17)(v11)(v3)();
                      var v19 = addEdge(v18)(v5)(v7)();
                      var v20 = addEdge(v19)(v6)(v8)();
                      return addEdge(v20)(v2)(v4)();
                  };
              });
          };
      };
  };

  // This function is used to start the construction and rotation of the CUBE. It also calls the drawBackground function --
  var startcube1 = (function () {
    
      // getting the canvas element from the HTML --
  var canvas = Graphics_Canvas.getCanvasElementById("mycanvas");
      return withAnimateContext("mycanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  var v = drawBackground(ctx)();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(drawCube(v)({
                      x: state1.x, 
                      y: state1.y, 
                      z: 0.0, 
                      size: 270.0, 
                      color: "rgb(0,0,0)"
                  })({
                      qx: state1.qx, 
                      qy: state1.qy, 
                      qz: state1.qz
                  }))();
                  var $99 = {};
                  for (var $100 in state1) {
                      if ({}.hasOwnProperty.call(state1, $100)) {
                          $99[$100] = state1[$100];
                      };
                  };
                  $99.x = state1.x;
                  $99.y = state1.y;
                  $99.qx = state1.qx;
                  $99.qy = state1.qy;
                  $99.qz = state1.qz + state1.loop;
                  $99.loop = Data_Ord.max(Data_Ord.ordNumber)(state1.loop - 4.0e-3)(0.0);
                  return $99;
              };
          };
      });
  })();
  var startcube2 = (function () {
    
      // getting the canvas element from the HTML --
  var canvas = Graphics_Canvas.getCanvasElementById("mycanvas");
      return withAnimateContext("mycanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  var v = drawBackground(ctx)();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(drawCube(v)({
                      x: state1.x, 
                      y: state1.y, 
                      z: 0.0, 
                      size: 270.0, 
                      color: "rgb(0,0,0)"
                  })({
                      qx: state1.qx, 
                      qy: state1.qy, 
                      qz: state1.qz
                  }))();
                  var $103 = {};
                  for (var $104 in state1) {
                      if ({}.hasOwnProperty.call(state1, $104)) {
                          $103[$104] = state1[$104];
                      };
                  };
                  $103.x = state1.x;
                  $103.y = state1.y;
                  $103.qx = state1.qx;
                  $103.qy = state1.qy + state1.loop;
                  $103.qz = state1.qz;
                  $103.loop = Data_Ord.max(Data_Ord.ordNumber)(state1.loop - 4.0e-3)(0.0);
                  return $103;
              };
          };
      });
  })();
  var startcube3 = (function () {
    
      // getting the canvas element from the HTML --
  var canvas = Graphics_Canvas.getCanvasElementById("mycanvas");
      return withAnimateContext("mycanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  var v = drawBackground(ctx)();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(drawCube(v)({
                      x: state1.x, 
                      y: state1.y, 
                      z: 0.0, 
                      size: 270.0, 
                      color: "rgb(0,0,0)"
                  })({
                      qx: state1.qx, 
                      qy: state1.qy, 
                      qz: state1.qz
                  }))();
                  var $107 = {};
                  for (var $108 in state1) {
                      if ({}.hasOwnProperty.call(state1, $108)) {
                          $107[$108] = state1[$108];
                      };
                  };
                  $107.x = state1.x;
                  $107.y = state1.y;
                  $107.qx = state1.qx + state1.loop;
                  $107.qy = state1.qy;
                  $107.qz = state1.qz;
                  $107.loop = Data_Ord.max(Data_Ord.ordNumber)(state1.loop - 4.0e-3)(0.0);
                  return $107;
              };
          };
      });
  })();

  // state object --

  // This function is used to DECELERATE the CUBE when mouse is clicked --
  var stopcube = (function () {
      var canvas = Graphics_Canvas.getCanvasElementById("mycanvas");
      return withAnimateContext("mycanvas")(state)(function (ctx) {
          return function (state1) {
              return function __do() {
                  var v = drawBackground(ctx)();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(drawCube(v)({
                      x: state1.x, 
                      y: state1.y, 
                      z: 0.0, 
                      size: 200.0, 
                      color: "rgb(0,0,0)"
                  })({
                      qx: state1.qx, 
                      qy: state1.qy, 
                      qz: state1.qz
                  }))();
                  var $111 = {};
                  for (var $112 in state1) {
                      if ({}.hasOwnProperty.call(state1, $112)) {
                          $111[$112] = state1[$112];
                      };
                  };
                  $111.x = state1.x;
                  $111.y = state1.y;
                  $111.qx = state1.qx;
                  $111.qy = state1.qy;
                  $111.qz = state1.qz;
                  return $111;
              };
          };
      });
  })();

  // main function --
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Control_Monad_Eff_Ref.newRef(0)();
      var v1 = Control_Monad_Eff_Ref.newRef(0)();
      startcube1();
      var v2 = Graphics_Canvas.getCanvasElementById("mycanvas")();
      var __unused = function (dictPartial1) {
          return function ($dollar48) {
              return $dollar48;
          };
      };
      return __unused()((function () {
          if (v2 instanceof Data_Maybe.Just) {
              return function __do() {
                  var v3 = Graphics_Canvas.getContext2D(v2.value0)();
                  var v4 = Control_Monad_Eff_DOM.querySelector("#mycanvas")();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v4)(Control_Monad_Eff_DOM.addEventListener("click")(Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      Control_Monad_Eff_Ref.modifyRef(v)(function (a) {
                          return a + 1 | 0;
                      })();
                      var v5 = Control_Monad_Eff_Ref.readRef(v)();
                      var $120 = v5 === 1;
                      if ($120) {
                          return stopcube();
                      };
                      return Control_Monad_Eff_Console.log("do nothing when mouse click")();
                  })))();
                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v4)(Control_Monad_Eff_DOM.addEventListener("mousemove")(Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v5 = Control_Monad_Eff_Ref.readRef(v)();
                      Control_Monad_Eff_Ref.modifyRef(v1)(function (a) {
                          return (a + 1 | 0) % 3;
                      })();
                      var v6 = Control_Monad_Eff_Ref.readRef(v1)();
                      (function () {
                          var $123 = v5 >= 1 && v6 === 1;
                          if ($123) {
                              return function __do() {
                                  Control_Monad_Eff_Ref.modifyRef(v)(function (a) {
                                      return 0;
                                  })();
                                  return startcube1();
                              };
                          };
                          return Control_Monad_Eff_Console.log("do nothing when mouse moved");
                      })()();
                      var v7 = Control_Monad_Eff_Ref.readRef(v)();
                      (function () {
                          var $125 = v7 >= 1 && v6 === 2;
                          if ($125) {
                              return function __do() {
                                  Control_Monad_Eff_Ref.modifyRef(v)(function (a) {
                                      return 0;
                                  })();
                                  return startcube2();
                              };
                          };
                          return Control_Monad_Eff_Console.log("do nothing when mouse moved");
                      })()();
                      var v8 = Control_Monad_Eff_Ref.readRef(v)();
                      var $127 = v8 >= 1 && v6 === 0;
                      if ($127) {
                          Control_Monad_Eff_Ref.modifyRef(v)(function (a) {
                              return 0;
                          })();
                          return startcube3();
                      };
                      return Control_Monad_Eff_Console.log("do nothing when mouse moved")();
                  })))();
              };
          };
          throw new Error("Failed pattern match at Main line 229, column 3 - line 230, column 3: " + [ v2.constructor.name ]);
      })())();
  });
  exports["Angle3D"] = Angle3D;
  exports["Cube"] = Cube;
  exports["Point2D"] = Point2D;
  exports["Point3D"] = Point3D;
  exports["addEdge"] = addEdge;
  exports["drawBackground"] = drawBackground;
  exports["drawCube"] = drawCube;
  exports["loopAnimation"] = loopAnimation;
  exports["main"] = main;
  exports["project"] = project;
  exports["startcube1"] = startcube1;
  exports["startcube2"] = startcube2;
  exports["startcube3"] = startcube3;
  exports["state"] = state;
  exports["stopcube"] = stopcube;
  exports["withAnimateContext"] = withAnimateContext;
  exports["withAnimation"] = withAnimation;
  exports["withStroke"] = withStroke;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
